#!/usr/bin/env zsh

# required: fzf,jq

zparseopts -D -E -F - \
  -force-arch=force_arch \
  -process-all=process_all \
  -process-existing=process_existing \
  -favorites=_favorites \
  -history=_history \
  {p,-playlist}:=playlist \
  {t,-template}:=template \
  {h,-help}=help || {
    print "see --help" >&2
    return 1
  }

if [[ -n $help ]]; then
cat <<- --------
usage: rashortcuts [OPTION]... [OUTPUT]

Playlists:
  --favorites         favorites playlist
  --history           history playlist
  -p, --playlist      path/to/playlist.lpl

If a playlist is not provided, fzf will list them automatically.

Process without fzf game selection.
  --process-all       process all entries for a given playlist
  --process-existing  re-process existing shortcuts in the output path

Last argument should point to the directory where the shortcut.app will be created.
Defaults to the current working directory.

Set CPU architectures:
  --force-arch        force the architecture to arm64 or x86_64 based on the core.
                      Runs independently of Rosetta mode set for RetroArch.

Custom templates:
  -t, --template      path/to/template-folder

An optional template for building shortcuts. It defaults to the folder named
"template" located in the same directory as this script.

  -h, --help          view help.

--------
return
fi

# Print with style.
p.header(){ printf "\n\e[1;30m%s\e[0m\n" $@ }
p.ok()    { printf   "\e[0;32m%s\e[0m\n" $@ }
p.warn()  { printf   "\e[0;33m%s\e[0m\n" $@ }
p.error() { printf   "\e[0;31m%s\e[0m\n" $@ >&2 }

# Make .icns files.
m.icns() {
  local icnset=${TMPDIR}-AppIcon.iconset
  mkdir $icnset
  sips -j $this_dir/makeicnset.js $1 -o $icnset
  iconutil -c icns $icnset -o $2
  rm -rf $icnset
}

output=${1:-.}

app_support=~/Library/Application\ Support/RetroArch
this_dir=$(dirname `realpath $0`)

# Ensure the default template is located with this script.
template=${template[-1]:-$this_dir/template}

for f in info.plist MacOS/launcher; [[ -f $template/Contents/$f ]] || {
  p.error "Check template: $f:t file not found." \
          "- $template/Contents/$f"
  return 1
}

# Find the RetroArch application directory. It must be spotlight searchable.
# Attempt to find the version number and minimum system requirements.
app_dir=`mdfind kMDItemCFBundleIdentifier = com.libretro.dist.RetroArch | head -n 1`
if [[ -n $app_dir ]]; then
  app_info=$app_dir/Contents/Info.plist
  app_icn=$app_dir/Contents/Resources/`plutil -extract CFBundleIconName raw $app_info`.icns
  app_ver=`plutil -extract CFBundleShortVersionString raw $app_info`
  min_ver=`plutil -extract LSMinimumSystemVersion raw $app_info`
fi

if [[ -n $playlist ]]; then
  playlist=${playlist[-1]}
else
  for k in _favorites _history; [[ -n ${(P)k} ]] && {
    content_path=$(eval printf %s $(
      awk -F= "/content${k}_path/ { print \$2 }" $app_support/config/retroarch.cfg
    ))
    playlist=${content_path/#\~/$HOME}
    break
  }
fi

if [[ ! -n $playlist ]]; then
  playlistdir=$(eval printf %s $(
    awk -F= '/playlist_directory/ {print $2}' $app_support/config/retroarch.cfg
  ))
  playlist=$(
    for lpl in ${playlistdir/#\~/$HOME}/*.lpl; do
      print -- "$lpl\t$lpl:t:r"
    done | fzf --delimiter '\t' --with-nth 2 --preview "jq -r '.items[].label' {1}" | cut -f1
  )
  if [[ ! -n $playlist ]]; then
    p.warn "Nothing selected."
    return
  fi
fi

if [[ ! -f $playlist ]]; then
  p.error "Playlist does not exist:" \
          "- $playlist"
  return 1
fi

# json list of cleaned up items.
# Ensure .label and .db_name are present.
items=$(
  jq '.items[] | select(( .label | length > 0 ) and ( .db_name | length > 0 )) | {
    system:.db_name|sub(".lpl"; ""),
    label: .label,
    gpath: .path,
    cname: .core_name,
    cpath: .core_path
  }' $playlist | jq -n '[inputs]'
)

limit=`print -- $items | jq 'length'`
if [[ -n ${process_all:-$process_existing} ]]; then
  work_indices=($(
    for (( i=0; i!=$limit; i++ )); print -- $i
  ))
else
  work_indices=($(
    for (( i=0; i!=$limit; i++ )); do
      print -- "$i\t`print -- $items | jq -r ".[$i].label"`"
    done | fzf --multi --delimiter '\t' --with-nth 2 | cut -f1
  ))
fi

if [[ -z $work_indices ]]; then
  p.warn "Nothing to process."
  return
fi

default_cname=`jq -r ".default_core_name" $playlist`
default_cpath=`jq -r ".default_core_path" $playlist`

IFS=$'\n'
for i in $work_indices; do
  read -d '' system label gpath cname cpath < <(
    print -- $items | jq -r ".[$i] | .system, .label, .gpath, .cname, .cpath"
  )
  cname=${${cname/DETECT}:-$default_cname}
  cpath=${${cpath/DETECT}:-$default_cpath}

  # Make label file system safe.
  # - replace ':' with '：' [Unicode U+FF1A] and '.'
  # - replace '/' with '᜵'. [Unicode U+1735]
  shortcut_app=$output/${${${label//: /：}//:/.}//\//᜵}.app

  if [[ -n $process_existing ]] && [[ ! -d $shortcut_app ]]; then
    continue
  fi

  # Create the app bundle.
  p.header "Creating \"$shortcut_app:t\""

  mkdir -p $shortcut_app
  if ! cp -R $template/Contents $shortcut_app; then
    p.error "Could not create \"$shortcut_app:t\"."
    continue
  fi

  # gpathextended: full path including possible archive content.
  # gpath: game path without the archive content pointers.
  # fname: name of the file itself.
  # aname: name of archive content. Empty if not present.
  # label: name from playlist name field usually taken from a database.

  unset match
  [[ $gpath:t =~ "(.*\.[[:alnum:]]{2,3})\#(.*)\.[[:alnum:]]{2,4}$" ]]
  gpathextended=$gpath
  gpath=$gpath:h/${match[1]:-$gpath:t}
  fname=$gpath:t:r
  aname=$match[2]

  # INFO.PLIST: Inherit info keys from RetroArch.
  shortcut_info=$shortcut_app/Contents/info.plist
  plutil -insert CFBundleDisplayName -string $label $shortcut_info
  plutil -insert CFBundleShortVersionString -string ${app_ver:-1.20.0} $shortcut_info
  plutil -insert LSMinimumSystemVersion -string ${min_ver:-10.13} $shortcut_info

  # short core name
  unset match
  [[ $cpath:t =~ "(.*)_libretro.dylib" ]]
  scname=$match[1]

  # INFO.PLIST: Set bundle id.
  # Limit application bundle id to alphanumerics.
  bundleid=com.libretro
  for s in $scname $fname; bundleid+=.`printf %s $s | tr -cd '[:alnum:]'`
  plutil -insert CFBundleIdentifier -string $bundleid $shortcut_info
  p.ok "BundleID: $bundleid"

  # LAUNCHER: Set architecture. Depends on --force-arch flag.
  if [[ -n $force_arch ]]; then
    carch=( `lipo -archs $cpath | tr ' ' '\n'` )
    if [[ ${#carch[@]} == 2 ]] || [[ $carch == arm64 ]]; then
      sed -i '' -E "s:#ARCH#:--arch arm64:" $shortcut_app/Contents/MacOS/launcher
      p.ok "Arch: arm64"
    elif [[ $carch == x86_64 ]]; then
      sed -i '' -E "s:#ARCH#:--arch x86_64:" $shortcut_app/Contents/MacOS/launcher
      p.ok "Arch: x86_64"
    fi
  fi

  # LAUNCHER: Set game path.
  if [[ -f $gpath ]]; then
    sed -i '' -E "s:#GAME#:\"$gpathextended\":" $shortcut_app/Contents/MacOS/launcher
    p.ok "Game: $gpathextended:t"
  else
    p.error "\"$gpath:t\" not found. \"$playlist:t\" pointing to a non-existing file:" \
            "- $gpathextended"
    continue
  fi

  # LAUNCHER: Set core string.
  if [[ -n $scname ]]; then
    sed -i '' -E "s:#CORE#:$scname:" $shortcut_app/Contents/MacOS/launcher
    p.ok "Core: $cname"
  else
    p.error "Core could not be determined from the playlist. Do one of the following:" \
            "- Set a default core for the playlist. (recommended)" \
            "- Run the game in RetroArch at least once from the playlist."
    continue
  fi

  if [[ ! -f $cpath ]]; then
    p.warn "Core could not be found. Will call with \"$scname\"."
  fi

  typeset -aU thumbnames=(
    $fname
    $aname
    $label
  )

  # For each name in $thumbnames:
  # - Chop off each occurance of `(.*)` or `[.*]` from the trailing end.
  # - Add each iteration to the list of naming candidates.
  for _name in $thumbnames; do
    while [[ $_name =~ "^(.+)(\(|\[)([^([]*)(\)|\]).*$" ]]; do
      _name=$match[1]
      # Discard trailing spaces.
      thumbnames+=${_name%${_name##*[! ]}}
    done
  done

  thumbfound=0
  icnpath=$shortcut_app/Contents/Resources/AppIcon.icns
  for set in Boxarts Titles Snaps; do
    for thumb in $thumbnames; do
      # Mimic RetroArch's safe naming for thumbnails.
      thumb=`printf %s $thumb | tr '&*/:\`<>?\|' '_'`
      thumbpath=$app_support/thumbnails/$system/Named_$set/$thumb.png
      if [[ -f $thumbpath ]]; then
        thumbfound=1
        p.ok "$set/$thumb.png -> $icnpath:t"
        m.icns $thumbpath $icnpath
        break 2
      fi
    done
  done

  # Use RetroSystem XMB theme content icon as a fallback.
  if ! (( $thumbfound )); then
    fallback=$app_support/assets/xmb/retrosystem/png/$system-content.png
    if [[ -f $fallback ]]; then
      p.warn "retrosystem/$system-content.png -> $icnpath:t"
      m.icns $fallback $icnpath
    elif [[ ! -f $icnpath ]]; then
      cp $app_icn $icnpath
      p.warn "Using RetroArch's default $app_icn:t file."
    else
      p.warn "$icnpath:t not copied."
    fi
  fi

  chmod +x $shortcut_app/Contents/MacOS/launcher

  codesign --force --sign - $shortcut_app

done
